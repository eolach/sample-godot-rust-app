name: CI

# Uncomment if the workflow should be triggered by whatever push
on: push

# Uncomment all these lines if the workflow should be triggered only for source code changes
# on:
#   push:
#     paths:
#     - 'dockerfiles/**'
#     - 'assets/**'
#     - 'scenes/**'
#     - 'src/**'
#     - 'project.godot'
#     - 'default_env.tres'
#     - 'Cargo.toml'
#     - 'export_presets.cfg'

jobs:
  # This job is where we compile Rust source code for Linux target
  rust-linux:
    runs-on: ubuntu-latest
    name: Building Rust source for Linux
    steps:
    - uses: actions/checkout@v2
    - name: Check Rust toolchain
      run: rustup show
    - name: Build
      run: cargo build --release
    - name: Run tests
      run: cargo test --release
    - name: Upload GDNative library as artifact
      uses: actions/upload-artifact@v1
      with:
        name: libcore.so
        path: target/release/libcore.so

  # This job is where we compile Rust source code for Windows target
  rust-windows:
    runs-on: ubuntu-latest
    name: Building Rust source for Windows
    steps:
    - uses: actions/checkout@v2
    - name: Check Rust toolchain
      run: rustup show
    - name: Install Cross
      run: cargo install cross
    - name: Build custom Docker image for x86_64-pc-windows-gnu toolchain with LLVM
      run: docker build -t my/x86_64-pc-windows-gnu:latest -f ./dockerfiles/x86_64-pc-windows-gnu.Dockerfile .
    - name: Build with Cross
      run: cross build --release --target x86_64-pc-windows-gnu
    - name: Run tests with Cross
      run: cross test --release --target x86_64-pc-windows-gnu
    - name: Upload GDNative library as artifact
      uses: actions/upload-artifact@v1
      with:
        name: core.dll
        path: target/x86_64-pc-windows-gnu/release/core.dll

  # This job is where we compile Rust source code for Android target
  rust-android:
    runs-on: ubuntu-latest
    name: Building Rust source for Android ARMv7
    steps:
    - uses: actions/checkout@v2
    - name: Check Rust toolchain
      run: rustup show
    - name: Add Rust toolchain
      run: rustup target add armv7-linux-androideabi
    - name: Install tons of Clang and LLVM tools
      run: sudo apt-get install clang-format clang-tidy clang-tools clang libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm -y
    - name: Check if llvm-config exists
      run: llvm-config --version
    - name: Update apt-get
      run: sudo apt-get update
    - name: Install glibc-devel so GDNative can use the standard C libraries
      run: sudo apt-get install g++-multilib libc6-dev-i386 -y
    - name: Try installing gcc-multilib
      run: sudo apt-get install gcc-multilib -y
    - name: Try setting up Cargo config for gcc linker
      run: |
        ls ~/.cargo/  
        touch ~/.cargo/config
        echo '[target.armv7-linux-androideabi]' >> ~/.cargo/config
        echo 'ar = "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ar"' >> ~/.cargo/config
        echo 'linker = "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi29-clang"' >> ~/.cargo/config
        cat ~/.cargo/config
    # - name: Copy jni_md.h into $JAVA_HOME/include
    #   run: sudo cp $JAVA_HOME/include/linux/* $JAVA_HOME/include
    - name: Build with Cargo
      run: C_INCLUDE_PATH=.:$JAVA_HOME/include/:$JAVA_HOME/include/linux/ cargo build --release --target armv7-linux-androideabi
    - name: Run tests with Cargo
      run: C_INCLUDE_PATH=.:$JAVA_HOME/include/:$JAVA_HOME/include/linux/ cargo test --release --target armv7-linux-androideabi
  
  # This job is where we build a Godot game for Linux,
  # using the Linux-compatible library we built in 'rust-linux'
  godot-linux:
    runs-on: ubuntu-latest
    needs: rust-linux
    name: Building Godot game for Linux/X11
    steps:
    - uses: actions/checkout@v2
    - name: Setup environment
      run: |
        sudo apt-get install tree
        wget https://downloads.tuxfamily.org/godotengine/3.2.1/Godot_v3.2.1-stable_linux_headless.64.zip
        wget https://downloads.tuxfamily.org/godotengine/3.2.1/Godot_v3.2.1-stable_export_templates.tpz
        mkdir ~/.cache
        mkdir -p ~/.config/godot
        mkdir -p ~/.local/share/godot/templates/3.2.1.stable
        unzip Godot_v3.2.1-stable_linux_headless.64.zip
        sudo mv Godot_v3.2.1-stable_linux_headless.64 /usr/local/bin/godot
        unzip Godot_v3.2.1-stable_export_templates.tpz
        sudo mv templates/* ~/.local/share/godot/templates/3.2.1.stable
        sudo rm -f Godot_v3.2.1-stable_linux_headless.64.zip Godot_v3.2.1-stable_export_templates.tpz
        mkdir -p ./build/linux
    - name: Download GDNative library artifact
      uses: actions/download-artifact@v1
      with:
        name: libcore.so
        path: target/release
    - name: Checking project structure for troubleshooting
      run: tree
    - name: Building for Linux/X11
      run: godot -v --export "Linux/X11" ./build/linux/sample_godot_rust_app.x86_64
    - name: Checking final build structure for troubleshooting
      run: tree ./build
    - name: Upload Linux game as artifact
      uses: actions/upload-artifact@v1
      with:
        name: sample_godot_rust_app_linux
        path: build/linux

  # This job is where we build a Godot game for Windows,
  # using the Windows-compatible library we built in 'rust-windows'
  godot-windows:
    runs-on: ubuntu-latest
    needs: rust-windows
    name: Building Godot game for Windows
    steps:
    - uses: actions/checkout@v2
    - name: Setup environment
      run: |
        sudo apt-get install tree
        wget https://downloads.tuxfamily.org/godotengine/3.2.1/Godot_v3.2.1-stable_linux_headless.64.zip
        wget https://downloads.tuxfamily.org/godotengine/3.2.1/Godot_v3.2.1-stable_export_templates.tpz
        mkdir ~/.cache
        mkdir -p ~/.config/godot
        mkdir -p ~/.local/share/godot/templates/3.2.1.stable
        unzip Godot_v3.2.1-stable_linux_headless.64.zip
        sudo mv Godot_v3.2.1-stable_linux_headless.64 /usr/local/bin/godot
        unzip Godot_v3.2.1-stable_export_templates.tpz
        sudo mv templates/* ~/.local/share/godot/templates/3.2.1.stable
        sudo rm -f Godot_v3.2.1-stable_linux_headless.64.zip Godot_v3.2.1-stable_export_templates.tpz
        mkdir -p ./build/windows
    - name: Download GDNative library artifact
      uses: actions/download-artifact@v1
      with:
        name: core.dll
        path: target/release
    - name: Checking project structure for troubleshooting
      run: tree
    - name: Building for Windows
      run: godot -v --export "Windows Desktop" ./build/windows/sample_godot_rust_app.exe
    - name: Checking final build structure for troubleshooting
      run: tree ./build
    - name: Upload Windows game as artifact
      uses: actions/upload-artifact@v1
      with:
        name: sample_godot_rust_app_windows
        path: build/windows

  # This job is where we create an official release in Github repo,
  # using the Godot games we built in 'godot-linux', 'godot-windows', etc.
  
  # github-release:
  #   runs-on: ubuntu-latest
  #   needs: [godot-windows, godot-linux]
  #   name: Release games on Github
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #   - name: Setup environment
  #     run: |
  #       mkdir -p windows
  #       mkdir -p linux
  #       mkdir -p macos
  #       mkdir -p android
  #       mkdir -p ios
  #   - name: Download Windows game
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: sample_godot_rust_app_windows
  #       path: windows
  #   - name: Zip Windows game
  #     run: zip -r sample_godot_rust_app_windows.zip windows
  #   - name: Download Linux game
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: sample_godot_rust_app_linux
  #       path: linux
  #   - name: Zip Linux game
  #     run: zip -r sample_godot_rust_app_linux.zip linux
  #   - name: Create a Github release
  #     if: github.ref == 'refs/heads/master'
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: nightly
  #       release_name: Nightly release
  #       body: Testing the Github Releases API, ZIPs archives with Linux and Windows versions of the game should appear.
  #       draft: false
  #       prerelease: false
  #   - name: Upload Linux game as release
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #       asset_path: ./sample_godot_rust_app_linux.zip
  #       asset_name: sample_godot_rust_app_linux.zip
  #       asset_content_type: application/zip
  #   - name: Upload Windows game as release 
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #       asset_path: ./sample_godot_rust_app_windows.zip
  #       asset_name: sample_godot_rust_app_windows.zip
  #       asset_content_type: application/zip